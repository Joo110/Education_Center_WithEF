Console.WriteLine("=== Testing GroupData Methods ===\n");

// Test: Add a new group
Console.WriteLine("Adding a new group...");
var newGroup = new GroupDto
{
    GroupName = "Test Group A",
    ClassId = 1,
    TeacherId = 2,
    SubjectTeacherId = 9,
    MeetingTimeId = 1,
    StudentCount = 15,
    CreatedByUserId = 1,
    CreationDate = DateTime.Now,
    LastModifiedDate = DateTime.Now,
    IsActive = true,
};

int? groupId = await GroupData.AddAsync(newGroup);
Console.WriteLine(groupId.HasValue
    ? $"Group added with ID: {groupId.Value}"
    : "Failed to add group.");

// Test: Get info by ID
if (groupId.HasValue)
{
    Console.WriteLine("\nRetrieving group by ID...");
    var group = await GroupData.GetInfoByIDAsync(groupId.Value);
    if (group != null)
    {
        Console.WriteLine($"Group Name: {group.GroupName}, Active: {group.IsActive}");
    }
    else
    {
        Console.WriteLine("Group not found.");
    }

    // Test: Update the group
    Console.WriteLine("\nUpdating group name...");
    group.GroupName = "Updated Group Name";
    bool updated = await GroupData.UpdateAsync(group);
    Console.WriteLine(updated ? "Update successful." : "Update failed.");

    // Test: Get subject fees
     Console.WriteLine("\nGetting subject fees...");
    decimal fees = await GroupData.GetSubjectFeesByGroupIDAsync(groupId.Value);
    Console.WriteLine($"Fees: {fees}");

    // Test: Get all students in group
    Console.WriteLine("\nGetting all students in the group...");
    var students = await GroupData.GetAllStudentsInGroupAsync(groupId.Value);
    if (students != null && students.Count > 0)
    {
        Console.WriteLine($"Found {students.Count} students.");
    }
    else
    {
        Console.WriteLine("No students found.");
    }
}

// Test: Get all group names
Console.WriteLine("\nGetting all group names...");
var groupNames = GroupData.GetAllGroupName();
Console.WriteLine("Groups:");
groupNames?.ForEach(name => Console.WriteLine($"- {name}"));

// Test: Get schedule for today
Console.WriteLine("\nGetting schedule for today...");
var schedule = await GroupData.GetScheduleForTodayAsync();
Console.WriteLine(schedule != null && schedule.Count > 0
    ? $"Found {schedule.Count} schedule items."
    : "No schedule found.");

Console.WriteLine("\n=== Testing Complete ===");